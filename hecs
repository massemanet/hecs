#!/bin/bash

set -euo pipefail

ID=~/.ssh/id_rsa_wg2

declare -A bastion=(
    [prod]=bastion.prod.loltel.co \
    [staging]=bastion.staging.loltel.co \
    [test]=bastion.test.loltel.co)

declare -A meta=()

usage() {
    cat <<EOF

  hecs is helper for navigating ECS. It's mostly a thin wrapper around
'aws ecs'; its power comes from hecs' ability to tab complete at every
level.

  It is often helpful to think of ECS entities as forming a graph;
  profile -> cluster -> service -> instance -> container

  hecs takes one path through such a graph as input, and can

'list' objects on the next level
'describe' the current object
'connect' to the obejct (if it is an instance or a container)

  'hecs list-commands' shows available commands.

EOF
}

err() {
    echo "$1"
    exit 1
}

meta+=([list-commands]="")
list-commands() {
    echo "${!meta[*]}"
}

meta+=([list-profiles]="")
list-profiles() {
    if [ -z "${AWS_VAULT+x}" ]
    then grep -Eo "profile [a-zA-Z_0-9-]+" ~/.aws/config | cut -c9-
    else echo "$AWS_VAULT"
    fi
}

meta+=([list-clusters]="PROFILE;")
list-clusters() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"

    $(_aws-env "$PROFILE") aws ecs list-clusters |\
        jq -r '.clusterArns[]' | cut -f2 -d"/" |\
        sort
}

meta+=([list-task-definition-families]="PROFILE")
list-task-definition-families() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    $(_aws-env "$PROFILE") aws ecs list-task-definition-families |\
        jq -r ".families[]"
}

list-attributes() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"

    $(_aws-env "$PROFILE") aws ecs list-attributes \
                           --cluster "$CLUSTER" \
                           --target-type container-instance |\
        jq '.attributes'
}

meta+=([list-services]="PROFILE;CLUSTER")
list-services() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"

    $(_aws-env "$PROFILE") aws ecs list-services \
                           --cluster "$CLUSTER" |\
        jq -r ".serviceArns[]" |\
        cut -f2 -d"/" |\
        sort
}

meta+=([list-instances]="PROFILE;CLUSTER")
list-container-instances() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"

    $(_aws-env "$PROFILE") aws ecs list-container-instances \
                           --cluster "$CLUSTER" |\
        jq -r ".containerInstanceArns[]" |\
        cut -f2 -d"/"
}

meta+=([list-service-instances]="PROFILE;CLUSTER;SERVICE")
list-service-instances() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${3:-""}" ]  || err "no service"
    local SERVICE="$3"

    $(_aws-env "$PROFILE") aws ecs describe-tasks \
                           --cluster "$CLUSTER" \
                           --tasks $(list-tasks "$PROFILE" "$CLUSTER" "$SERVICE") |\
        jq -r '.tasks[].containerInstanceArn' |\
        cut -f2 -d"/"
}

meta+=([list-tasks]="PROFILE;CLUSTER;SERVICE")
list-tasks() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${3:-""}" ]  || err "no service"
    local SERVICE="$3"

    $(_aws-env "$PROFILE") aws ecs list-tasks --cluster "$CLUSTER" --service "$SERVICE" |\
        jq -r '.taskArns[]' |\
        cut -f2 -d"/"
}

meta+=([list-task-definitions]="PROFILE;CLUSTER;SERVICE")
list-task-definition() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${3:-""}" ]  || err "no service"
    local SERVICE="$3"

    $(_aws-env "$PROFILE") aws ecs describe-tasks \
                           --cluster "$CLUSTER" \
                           --tasks $(list-tasks "$PROFILE" "$CLUSTER" "$SERVICE") |\
        jq -r '.tasks[].taskDefinitionArn' |\
        cut -f2 -d"/" |\
        sort -u
}

meta+=([list-dockers]="PROFILE;CLUSTER;SERVICE;INSTANCE")
list-dockers() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${3:-""}" ]  || err "no service"
    local SERVICE="$3"
    [ -n "${4:-""}" ]  || err "no instance"
    local INSTANCE="$4"

    local ecs_tasks
    local cmd="curl -s 'http://127.0.0.1:51678/v1/tasks'"

    ecs_tasks="$(_exec-ssh "$PROFILE" "$CLUSTER" "$INSTANCE" "" "$cmd")"
    echo "$ecs_tasks" |\
        jq -r ".Tasks[] | select(.Family == \"$SERVICE\") | .Containers[].DockerName"
}

meta+=([describe-cluster]="PROFILE;CLUSTER")
describe-cluster() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"

    $(_aws-env "$PROFILE") aws ecs describe-clusters \
                           --clusters "$CLUSTER" |\
        jq -r '.clusters[]'
}

meta+=([describe-service]="PROFILE;CLUSTER;SERVICE")
describe-service() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${3:-""}" ]  || err "no service"
    local SERVICE="$3"

    TASKDEF="$(list-task-definition "$PROFILE" "$CLUSTER" "$SERVICE")"
    TASKS="$(list-tasks "$PROFILE" "$CLUSTER" "$SERVICE")"

    UNO="$($(_aws-env "$PROFILE") aws ecs describe-services \
                           --cluster "$CLUSTER" \
                           --services "$SERVICE" |\
        jq '.services[] | del(.events)')"

    DUE="$($(_aws-env "$PROFILE") aws ecs describe-task-definition \
                           --task-definition "$TASKDEF")"

    TRES="$($(_aws-env "$PROFILE") aws ecs describe-tasks \
            --cluster "$CLUSTER" \
            --tasks $TASKS)"

    jq -n "$UNO + $DUE + $TRES"
}

meta+=([describe-container-instance]="PROFILE;CLUSTER;SERVICE;INSTANCE")
describe-container-instance() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${4:-""}" ]  || err "no container-instance"
    local INSTANCE="$4"

    $(_aws-env "$PROFILE") aws ecs describe-container-instances \
                           --cluster "$CLUSTER" \
                           --container-instances "$INSTANCE" |\
        jq ".containerInstances[]"
}

# describe an EC2 instance that's happens to be run by ECS
meta+=([describe-ec2-instance]="PROFILE;CLUSTER;SERVICE;INSTANCE")
describe-ec2-instance() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${4:-""}" ]  || err "no instance"
    local INSTANCE="$4"

    local ec2_id
    ec2_id="$(describe-container-instance "$PROFILE" "$CLUSTER" "" "$INSTANCE" |\
                                           jq -r '.ec2InstanceId')"
    $(_aws-env "$PROFILE") aws ec2 describe-instances \
                           --instance-ids "$ec2_id" \
                           --filters "Name=instance-state-name,Values=running" |\
        jq '.Reservations[].Instances[]'
}

meta+=([describe-docker]="PROFILE;CLUSTER;SERVICE;INSTANCE;DOCKERNAME")
describe-docker() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${4:-""}" ]  || err "no task"
    local INSTANCE="$4"
    [ -n "${5:-""}" ]  || err "no dockername"
    local DOCKERNAME="$5"

    local command="docker inspect $DOCKERNAME"
    _exec-ssh "$PROFILE" "$CLUSTER" "$INSTANCE" "-tt" "$command" |\
        jq '.[]'
}

# get a shell in a container instance
meta+=([connect-docker]="PROFILE;CLUSTER;SERVICE;INSTANCE;DOCKERNAME")
connect-docker() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${4:-""}" ]  || err "no instance"
    local INSTANCE="$4"
    [ -n "${5:-""}" ]  || err "no dockername"
    local DOCKERNAME="$5"

    local command="docker exec -it --detach-keys ctrl-q,ctrl-q $DOCKERNAME sh"
    _exec-ssh "$PROFILE" "$CLUSTER" "$INSTANCE" "-tt" "$command"
}

# get a shell on an EC2 instance
meta+=([connect-instance]="PROFILE;CLUSTER;SERVICE;INSTANCE")
connect-instance() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no cluster"
    local CLUSTER="$2"
    [ -n "${4:-""}" ]  || err "no instance"
    local INSTANCE="$4"

    _exec-ssh "$PROFILE" "$CLUSTER" "$INSTANCE" "-tt"
}

## helpers

# execute a SSH command on an instance through a bastion
_exec-ssh() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ] || err "no cluster"
    local CLUSTER="$2"
    [ -n "${3:-""}" ] || err "no instance"
    local INSTANCE="$3"
    [ -n "${4:-""}" ] && local SSHFLAGS="${4}"
    [ -n "${5:-""}" ] && local CMD="${5}"
    local ec2_instance_data keyname secretname tmpkeyfile ec2_ip

    ec2_instance_data="$(describe-ec2-instance "$PROFILE" "$CLUSTER" "" "$INSTANCE")"
    keyname="$(echo "$ec2_instance_data" | jq -r '.KeyName')"
    secretname=ssh/$keyname-rsa
    tmpkeyfile="$(_get-keyfile "$PROFILE" "$secretname")"
    ec2_ip="$(echo "$ec2_instance_data" | jq -r '.PrivateIpAddress')"
    ssh \
        ${SSHFLAGS+$SSHFLAGS} \
        -i "$tmpkeyfile" \
        -o PermitLocalCommand="yes" \
        -o LocalCommand="rm $tmpkeyfile" \
        -o ProxyCommand="ssh ubuntu@${bastion[$PROFILE]} -i $ID -W %h:%p" \
        "core@$ec2_ip" \
        ${CMD+$CMD}
}

# temp key from secretnaman
_get-keyfile() {
    [ -n "${1:-""}" ]  || err "no profile"
    local PROFILE="$1"
    [ -n "${2:-""}" ]  || err "no secret"
    local secret="$2"
    local keyfile
    keyfile=$(mktemp "/tmp/key-$PROFILE-XXX")

    $(_aws-env "$PROFILE") aws secretsmanager get-secret-value \
                           --secret-id "$secret" \
        | jq -r '.SecretString' > "$keyfile"
    chmod 600 "$keyfile"

    echo "$keyfile"
}

# if $AWS_VAULT is unset, we do `aws-vault exec`
_aws-env() {
    [ -z "${AWS_VAULT+x}" ] && [ -z "${AWS_ACCESS_KEY_ID+x}" ] && echo "aws-vault exec $1 --"
}

## entrypoint

case "${1:-""}" in
    "" | "help") usage;;
    *) "$1" "${@:2}";;
esac
